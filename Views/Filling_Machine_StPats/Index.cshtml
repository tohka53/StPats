@model IEnumerable<StPats.Models.Filling_Machine_StPats>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="jumbotron-fluid bg-secondary ">
    <Div class="box-title">
        <h1 class="text-center">Filling Machine Terminology </h1>
    </Div>
    <div class="text-center">
        <h4>Wine Bottle Fillers are Level-Filling</h4>
    </div>
    <div class="text-center">
        <h4>Volume-Filling Machines cannot be used for wine bottles</h4>
    </div>
    <br />
    <div align="justify">
        There are two basic approaches to filling machines that cover virtually all industries. One approach, and the one that MUST be used for wine, is to control the Fill-Level. The other approach, Volume-Filling, controls the volume. As discussed below, a perfect Volume-Filler, when used for wine bottles, will result in fill levels ranging over 2.4", greater than even the cork length.

        <br />
        <p>
            <strong>What is Volume-Filling?</strong>
            <br />
            Volume-Filling involves accurately measuring the Volume of liquid during filling. In its most accurate form, a piston
            (much like a syringe) of a precise volume is filled, then this piston is emptied into the container.
            You will find hundreds or products in a grocery store packaged with volume-fillers (but not wine). Bag-in-a-box fillers are
            a type of volume filler as well. Timer-based volume-filling is an alternative to piston volume-fillers. In this case, the volume
            is controlled by a pump and valve run under a timer. This is less accurate than the piston design but also less expensive. It is also less versatile than piston type fillers in handling a wide range of products, particularly those with suspended particles.
            <br />
        </p>
        <strong> Volume-Fillers, either the piston design or the timer design, are inherently flawed for filling wine bottles. </strong>
        <br />
        Wine bottles vary in volume by +/-0.25 oz. However, this relatively small volume variation results in very large Fill-Level variation due to the long narrow neck of a wine bottle. The +/- .25 oz volume translates into +/- 1.2" in fill level. In other words, a perfect volume- filler will result in fill levels varying over 2.4". [This is the best case for flat bottles. Punted bottles have slightly larger variations. The data on volume variatons for wine bottles was obtained from the largest manufacturer of wine bottles in North America.]
        On the other hand, wine filling machines, both gravity and vacuum control the Fill Level on each individual bottle. It is the nozzle design that shuts off the filling at a preset level. Bottles of different volume are filled to the same level.
        <br />
        <br />   We receive many inquiries from small businesses who make a range of products including salsa, body lotion, liquid soaps, automobile fluids, .... Generally speaking, your bottle must have a narrow opening and long neck like a wine bottle to use the filling machines on this page. Secondly, you cannot have suspended particles that will plug the nozzles.
    </div>
</div>

<h2>
    Filling Machines
</h2>
<!---><p>
  @Html.ActionLink("Create New", "Create")
</p>
    </!--->

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.code_produt)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.name_product)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.price)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.image)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.manual)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.voltage_regulator)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.regulador)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.stock)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.extra_things)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Estado_StPats.descripcion)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Locations_StPats.description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Manufactured_Stpats.name_manufactured)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Productos_StPats.codigo)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Tipo_Producto_StPats.descripcion_producto)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.code_produt)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.name_product)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.image)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.manual)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.voltage_regulator)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.regulador)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.stock)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.extra_things)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Estado_StPats.descripcion)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Locations_StPats.description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Manufactured_Stpats.name_manufactured)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Productos_StPats.codigo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Tipo_Producto_StPats.descripcion_producto)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.id_filling_machine }) |
                @Html.ActionLink("Details", "Details", new { id = item.id_filling_machine }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.id_filling_machine })
            </td>
        </tr>
    }

</table>
